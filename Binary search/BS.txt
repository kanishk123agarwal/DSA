binary search is based on three types of problem 
1) general binary search question 
2) predicate and search space problem 
3) index based problem it is less but it's also very important -- it is based on because index is in sorted manner so it is also good 

general question on binary search is based on mid number or general approach 
EX nearly sorted array 
pivot index


predicate and search space basically lie on the search space 
find sqrt(x);
divident/divisor

index based basically 
oddoccuring of element


for large number array 
exponential search 
Application : unbounded search : find the element in an infinity array 
better than BS when x is beginning in array 
T.C o(logn)
algo:
1) first we found the range where the target value is find so the binary search is in the range and we don't search in long array 
2) apply binary search 

About unbounded binary search : find the element in infinite sorted array - o(logn);
Source: Amazon Interview Experience. 
Since array is sorted, the first thing clicks into mind is binary search, but the problem here is that we don’t know size of array. 
If the array is infinite, that means we don’t have proper bounds to apply binary search. So in order to find position of key, first we find bounds and then apply binary search algorithm.
Let low be pointing to 1st element and high pointing to 2nd element of array, Now compare key with high index element, 
->if it is greater than high index element then copy high index in low index and double the high index. 
->if it is smaller, then apply binary search on high and low indices found.

About time complexity
Let p be the position of element to be searched. Number of steps for finding high index ‘h’ is O(Log p). 
The value of ‘h’ must be less than 2*p. The number of elements between h/2 and h must be O(p). 
Therefore, time complexity of Binary Search step is also O(Log p) and overall time complexity is 2*O(Log p) which is O(Log p).
